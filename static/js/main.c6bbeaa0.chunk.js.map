{"version":3,"sources":["Components/Cell.js","Components/Board.js","Components/Header.js","Components/Footer.js","Components/App.js","reportWebVitals.js","index.js"],"names":["Cell","currentPlayer","visited","play","style","className","id","onClick","Board","gameState","map","square","i","Header","props","this","Component","Footer","winner","reset","App","useState","setCurrentPlayer","Array","fill","setGameState","gameOver","setGameOver","setWinner","compute","winningConditions","length","a","b","c","useEffect","tempGameState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gTAYeA,EATF,SAAC,GAAmC,EAAlCC,cAAmC,IAApBC,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,KAC/BC,EAAQF,EAAO,eAAWA,GAAX,OACrB,OACE,qBAAKG,UAAWD,EAAOE,GAAIJ,EAASK,QAASJ,EAA7C,SACKD,KCYMM,EAfD,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,UAAWR,EAAyB,EAAzBA,cAAeE,EAAU,EAAVA,KACxC,OACE,qBAAKE,UAAU,QAAf,SAEII,EAAUC,KACR,SAACC,EAAQC,GAAT,OACE,cAAC,EAAD,CAAcV,QAASS,EAASR,KAAM,kBAAMA,EAAKS,IAAIX,cAAeA,GAAzDW,S,6BCMRC,EAdf,kDACE,WAAYC,GAAO,uCACXA,GAFV,0CAIE,WACE,OACE,gCACA,6CACA,kDAAoB,sBAAMR,GAAG,iBAAT,SAA4BS,KAAKD,MAAMb,0BARjE,GAA4Be,aCWbC,G,MAVA,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,MACvB,OACI,gCACGD,GAAU,qBAAIZ,GAAG,cAAP,UAAsBY,EAAtB,YAEX,wBAAQX,QAASY,EAAjB,wBC2DOC,G,MA7DH,WAAO,IAAD,EAC0BC,mBAAS,KADnC,mBACTpB,EADS,KACMqB,EADN,OAEkBD,mBAASE,MAAM,GAAGC,KAAK,OAFzC,mBAETf,EAFS,KAEEgB,EAFF,OAGgBJ,oBAAS,GAHzB,mBAGTK,EAHS,KAGCC,EAHD,OAIYN,mBAAS,MAJrB,mBAITH,EAJS,KAIDU,EAJC,KAMVC,EAAU,SAACpB,GAWf,IAVA,IAAMqB,EAAqB,CACzB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAlB,EAAI,EAAGA,EAAIkB,EAAkBC,OAAQnB,IAAK,CAAC,IAAD,cAC/BkB,EAAkBlB,GADa,GAC1CoB,EAD0C,KACvCC,EADuC,KACpCC,EADoC,KAE7CzB,EAAUuB,IAAMvB,EAAUuB,KAAOvB,EAAUwB,IAAMxB,EAAUuB,KAAOvB,EAAUyB,KAC9EP,GAAY,GACZC,EAAU3B,MA+BhB,OAVAkC,qBAAU,WAENb,EADmB,KAAjBrB,EACe,IAEA,KAEnB4B,EAAQpB,KAEP,CAACA,IAGF,sBAAKJ,UAAU,YAAf,UACE,cAAC,EAAD,CAAQJ,cAAeA,IACvB,cAAC,EAAD,CAAOQ,UAAWA,EAAWN,KAtBpB,SAACS,GACZ,IAAIc,EAAJ,CACA,IAAMU,EAAa,YAAO3B,GAC1B2B,EAAcxB,GAAKX,EACnBwB,EAAaW,GACbP,EAAQpB,KAiBoCR,cAAeA,IACzD,cAAC,EAAD,CAAQiB,OAAQA,EAAQC,MA9Bd,WACZM,EAAaF,MAAM,GAAGC,KAAK,OAC3BG,GAAY,GACZC,EAAU,MACVN,EAAiB,aCxBNe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c6bbeaa0.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './Cell.css';\r\n\r\nconst Cell = ({currentPlayer, visited, play}) => {\r\n  const style = visited ? `cell ${visited}` : `cell`;\r\n  return ( \r\n    <div className={style} id={visited} onClick={play} >\r\n        {visited}\r\n    </div>\r\n   );\r\n}\r\n \r\nexport default Cell;","import React, { Component } from 'react';\r\nimport './Board.css';\r\nimport Cell from './Cell';\r\n\r\nconst Board = ({gameState, currentPlayer, play}) => {\r\n  return ( \r\n    <div className=\"board\">\r\n      {\r\n        gameState.map(\r\n          (square, i) => (\r\n            <Cell key={i} visited={square}  play={() => play(i)} currentPlayer={currentPlayer}  />\r\n          )\r\n        )\r\n      }\r\n    </div>\r\n    \r\n   );\r\n}\r\n \r\nexport default Board;\r\n\r\n","import React, { Component } from 'react'\r\n\r\nexport class Header extends Component {\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n      <h2>Tic Tac Toe</h2>\r\n      <h3>Current Player: <span id=\"current-player\" >{this.props.currentPlayer}</span></h3>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Header\r\n","import React, { Component } from 'react'\r\nimport './Footer.css';\r\n\r\nconst Footer = ({winner, reset}) => {\r\n  return ( \r\n      <div>\r\n        {winner && <h3 id=\"game-status\">{winner} Won! </h3>}\r\n        \r\n        <button onClick={reset} >RESET</button>\r\n      </div>\r\n   );\r\n}\r\n \r\nexport default Footer;\r\n","import React, { Component, useEffect, useState } from 'react'\nimport Board from './Board';\nimport Header from './Header';\nimport Footer from './Footer';\nimport './App.css';\n\nconst App = () => {\n  const [currentPlayer, setCurrentPlayer] = useState('X');\n  const [gameState, setGameState] = useState(Array(9).fill(null));\n  const [gameOver, setGameOver] = useState(false);\n  const [winner, setWinner] = useState(null);\n\n  const compute = (gameState) => {\n    const winningConditions =  [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < winningConditions.length; i++) {\n      const [a, b, c] = winningConditions[i];\n      if (gameState[a] && gameState[a] === gameState[b] && gameState[a] === gameState[c]){\n        setGameOver(true);\n        setWinner(currentPlayer);\n      }\n    }\n  }\n  \n  const reset = () => {\n    setGameState(Array(9).fill(null));\n    setGameOver(false);\n    setWinner(null);\n    setCurrentPlayer(\"X\");\n  }\n\n  const play = (i) => {\n    if (gameOver) return;\n    const tempGameState = [...gameState];\n    tempGameState[i] = currentPlayer;\n    setGameState(tempGameState);\n    compute(gameState);\n    \n  }\n\n  useEffect(() => {\n    if (currentPlayer == 'X'){\n      setCurrentPlayer('O');\n    } else {\n      setCurrentPlayer('X');\n    }\n    compute(gameState);\n    \n  }, [gameState])\n\n  return ( \n    <div className=\"container\">\n      <Header currentPlayer={currentPlayer}  />\n      <Board gameState={gameState} play={play}  currentPlayer={currentPlayer} />\n      <Footer winner={winner} reset={reset}  />\n    </div>\n   );\n}\n \nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}